package com.knsr.wmgmt.repository;

import com.knsr.wmgmt.entity.Usage;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;


@Repository
public interface ReportRepository12 extends JpaRepository<Usage, Long> {

    @Query("SELECT COUNT(u) FROM User u")
    long countTotalUsers();

    @Query("SELECT COUNT(z) FROM Zone z")
    long countTotalZones();

    @Query("SELECT COUNT(m) FROM WaterMeter m WHERE m.status = 'active'")
    long countActiveMeters();

    @Query("SELECT SUM(u.consumptionLiters) FROM Usage u")
    Double sumTotalConsumption();

    @Query("SELECT COUNT(b) FROM Billing b WHERE b.status = 'unpaid'")
    long countPendingBills();

  /*  @Query("SELECT COUNT(a) FROM Alert a WHERE DATE(a.createdAt) = CURRENT_DATE", nativeQuery = true)
    long countAlertsToday();*/

    @Query(value = """
        SELECT u.username, DATE_TRUNC('month', us.timestamp) AS month, SUM(us.consumption_liters)
        FROM water_mgmt.usage us
        JOIN water_mgmt.meter wm ON us.meter_id = wm.id
        JOIN water_mgmt.user u ON wm.user_id = u.id
        GROUP BY u.username, month
        ORDER BY month, u.username
        """, nativeQuery = true)
    List<Object[]> getMonthlyUsagePerUser();

    @Query(value = """
        SELECT z.name, DATE_TRUNC('month', us.timestamp) AS month, SUM(us.consumption_liters)
        FROM water_mgmt.usage us
        JOIN water_mgmt.meter wm ON us.meter_id = wm.id
        JOIN water_mgmt.zone z ON wm.zone_id = z.id
        GROUP BY z.name, month
        ORDER BY month, z.name
        """, nativeQuery = true)
    List<Object[]> getMonthlyUsagePerZone();

    @Query(value = """
        SELECT a.created_at::date, a.meter_id, z.name, a.type, a.message
        FROM water_mgmt.alert a
        JOIN water_mgmt.meter wm ON a.meter_id = wm.id
        JOIN water_mgmt.zone z ON wm.zone_id = z.id
        WHERE a.created_at >= NOW() - INTERVAL '7 days'
        ORDER BY a.created_at DESC
        """, nativeQuery = true)
    List<Object[]> getRecentAlerts();

    @Query(value = """
        SELECT u.username, b.amount, b.status
        FROM water_mgmt.billing b
        JOIN water_mgmt.user u ON b.user_id = u.id
        """, nativeQuery = true)
    List<Object[]> getBillingSummary();

    @Query(value = """
        SELECT u.username, us.timestamp, us.consumption_liters
        FROM water_mgmt.usage us
        JOIN water_mgmt.meter wm ON us.meter_id = wm.id
        JOIN water_mgmt.user u ON wm.user_id = u.id
        WHERE us.consumption_liters > 150
        ORDER BY us.timestamp DESC
        """, nativeQuery = true)
    List<Object[]> getHighUsageAnomalies();


    @Query(value = """
       WITH avg_usage AS (
           SELECT u.username, AVG(us.consumption_liters) AS avg_consumption
           FROM water_mgmt.usage us
           JOIN water_mgmt.meter wm ON us.meter_id = wm.id
           JOIN water_mgmt.user u ON wm.user_id = u.id
           GROUP BY u.username
       )
       SELECT username, ROUND((1.0 / NULLIF(avg_consumption, 0))::numeric, 6) AS efficiency_score
       FROM avg_usage
        """, nativeQuery = true)
    List<Object[]> getEfficiencyScores();

}
